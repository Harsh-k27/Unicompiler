from tkinter import *
import pygame
from tkinter import filedialog
import time
from mutagen.mp3 import MP3
import tkinter.ttk as ttk

root = Tk()
root.title("Mp3 Player")
root.iconbitmap()
root.geometry("500x450")

# Initialise Pygame Mixer
pygame.mixer.init()

#grab song length time info
def play_time():
    if stopped:
       return
    current_time = pygame.mixer.music.get_pos() / 1000
    converted_current_time = time.strftime('%M:%S', time.gmtime(current_time))
    #get currently playing song
    #current_song = song_box.curselection()
    song = song_box.get(ACTIVE)
    song = f'C:/Users/KIIT/Desktop/music/{song}.mp3'
    
    #get song length with mutagen
    song_mut = MP3(song)
    global song_length
    song_length = song_mut.info.length
    converted_song_length = time.strftime('%M:%S', time.gmtime(song_length))

    current_time +=1
    if int(my_slider.get()) ==int(song_length):
       status_bar.config(text=f'Time Elapsed:{converted_song_length}')
    elif paused:
        pass
    elif int(my_slider.get()) ==int(current_time):
       slider_position = int(song_length)
       my_slider.config(to=slider_position, value=int(current_time))
     
    else: 
        slider_position = int(song_length)
        my_slider.config(to=slider_position, value=int(my_slider.get()))
        converted_current_time = time.strftime('%M:%S', time.gmtime(int(my_slider.get())))
        status_bar.config(text=f'Time Elapsed:{converted_current_time}   of   {converted_song_length}   ')
        next_time =int(my_slider.get()) + 1
        my_slider.config(value=next_time)
    
    #update time
    status_bar.after(1000, play_time)

# Add song function
def add_song():
    song = filedialog.askopenfilename(initialdir=r"C:\Users\KIIT\Desktop\music", title="Choose a song", filetypes=(("mp3 Files", "*.mp3"),))
    
    #removing directory and .mp3 extension
    song = song.replace("C:/Users/KIIT/Desktop/music/", "")
    song = song.replace(".mp3", "")
    
    #Add song to listbox
    song_box.insert(END, song)

#add many songs to playlist
def add_many_songs():
    songs = filedialog.askopenfilenames(initialdir=r"C:\Users\KIIT\Desktop\music", title="Choose a song", filetypes=(("mp3 Files", "*.mp3"),))

    #loop thru song list and replace directory info and mp3
    for song in songs:
        song = song.replace("C:/Users/KIIT/Desktop/music/", "")
        song = song.replace(".mp3", "")

        #insert info playlist
        song_box.insert(END, song)

#play selected song
def play():
    global stopped
    stopped = False
    song = song_box.get(ACTIVE)
    song = f'C:/Users/KIIT/Desktop/music/{song}.mp3'

    pygame.mixer.music.load(song)
    pygame.mixer.music.play(loops=0)

    #call the play_time function to get song length
    play_time()

#stop playing current song
global stopped
stopped = False
def stop():
    status_bar.config(text='')
    my_slider.config(value=0)
    pygame.mixer.music.stop()
    song_box.selection_clear(ACTIVE)
    #clear the staus bar
    status_bar.config(text='')
    
    global stopped
    stopped = True
#play the next song 
def next_song():
    status_bar.config(text='')
    my_slider.config(value=0)
    next_one = song_box.curselection()
    next_one = next_one[0]+1
    song = song_box.get(next_one)
    song = f'C:/Users/KIIT/Desktop/music/{song}.mp3'

    pygame.mixer.music.load(song)
    pygame.mixer.music.play(loops=0)
    
    #clear active bar
    song_box.selection_clear(0, END)

    #activate active bar
    song_box.activate(next_one)

    #set active bar to next song
    song_box.selection_set(next_one, last=None)

#play previous song
def previous_song():
    status_bar.config(text='')
    my_slider.config(value=0)
    next_one = song_box.curselection()
    next_one = next_one[0]-1
    song = song_box.get(next_one)
    song = f'C:/Users/KIIT/Desktop/music/{song}.mp3'

    pygame.mixer.music.load(song)
    pygame.mixer.music.play(loops=0)
    
    #clear active bar
    song_box.selection_clear(0, END)

    #activate active bar
    song_box.activate(next_one)

    #set active bar to next song
    song_box.selection_set(next_one, last=None)

#delete a song
def delete_song():
    stop()
    song_box.delete(ANCHOR)
    pygame.mixer.music.stop()

#delete all songs
def delete_all_songs():
    stop()
    song_box.delete(0, END)
    pygame.mixer.music.stop()

#create global pause variable
global paused
paused = False

#pause and unpause
def pause(is_paused):
    global paused
    paused = is_paused

    if paused:
       pygame.mixer.music.unpause()
       paused = False
    else:
       pygame.mixer.music.pause()
       paused = True

#create slider function
def slide(x):
    song = song_box.get(ACTIVE)
    song = f'C:/Users/KIIT/Desktop/music/{song}.mp3'

    pygame.mixer.music.load(song)
    pygame.mixer.music.play(loops=0, start=int(my_slider.get()))

# Create Playlist box (fg =  text color)
song_box = Listbox(root, bg="white", fg="cyan", width=60, selectbackground="grey", selectforeground="blue")
song_box.pack(pady=20)

# create player buttons
back_btn_img = PhotoImage(file=r"C:\Users\KIIT\Desktop\icons\icons8-skip-to-start-circled-64.png")
forward_btn_img = PhotoImage(file=r"C:\Users\KIIT\Desktop\icons\icons8-end-circled-64.png")
play_btn_img = PhotoImage(file=r"C:\Users\KIIT\Desktop\icons\icons8-circled-play-64.png")
pause_btn_img = PhotoImage(file=r"C:\Users\KIIT\Desktop\icons\icons8-pause-button-64.png")
stop_btn_img = PhotoImage(file=r"C:\Users\KIIT\Desktop\icons\icons8-stop-circled-64.png")

# create player control frame
controls_frame = Frame(root)
controls_frame.pack()

# create player control buttons
back_btn = Button(controls_frame, image=back_btn_img, borderwidth=0, command=previous_song)
forward_btn = Button(controls_frame, image=forward_btn_img, borderwidth=0, command=next_song)
play_btn = Button(controls_frame, image=play_btn_img, borderwidth=0, command=play)
pause_btn = Button(controls_frame, image=pause_btn_img, borderwidth=0, command=lambda: pause(paused))
stop_btn = Button(controls_frame, image=stop_btn_img, borderwidth=0, command=stop)

back_btn.grid(row=0, column=0, padx=10)
forward_btn.grid(row=0, column=4, padx=10)
play_btn.grid(row=0, column=1, padx=10)
pause_btn.grid(row=0, column=2, padx=10)
stop_btn.grid(row=0, column=3, padx=10)

# create menu
my_menu = Menu(root)
root.config(menu=my_menu)

# add song in menu
add_song_menu = Menu(my_menu)
my_menu.add_cascade(label="Add Songs", menu=add_song_menu)
add_song_menu.add_command(label="Add one song to Playlist", command=add_song)

#add multiple songs
add_song_menu.add_command(label="Add many songs to Playlist", command=add_many_songs)

# create delete song
remove_song_menu = Menu(my_menu)
my_menu.add_cascade(label="Remove songs", menu=remove_song_menu)
remove_song_menu.add_command(label="Delete a song from playlist", command=delete_song)
remove_song_menu.add_command(label="Delete all song from playlist", command=delete_all_songs)

#create status bar
status_bar = Label(root, text="", bd=1, relief=GROOVE, anchor=E)
status_bar.pack(fill=X, side=BOTTOM, ipady=2)

#create slider
my_slider = ttk.Scale(root, from_=0, to=100, orient = HORIZONTAL, value=0, command=slide, length=360 )
my_slider.pack(pady=30)

root.mainloop()
